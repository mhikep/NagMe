import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";
import { format, isPast } from "date-fns";

export default function CalendarDay({ date, reminders, isCurrentMonth, isToday, onClick }) {
  const pendingReminders = reminders.filter(r => r.status === "pending");
  const completedReminders = reminders.filter(r => r.status === "completed");
  const overdueReminders = pendingReminders.filter(r => isPast(new Date(r.due_date)));

  const getCardClasses = () => {
    let classes = "min-h-[100px] p-2 cursor-pointer transition-all duration-200 hover:shadow-md ";
    
    if (!isCurrentMonth) {
      classes += "bg-slate-50 dark:bg-slate-800/50 text-slate-400 dark:text-slate-500 ";
    } else {
      classes += "bg-white dark:bg-slate-800 ";
    }
    
    if (isToday) {
      classes += "ring-2 ring-amber-500 dark:ring-amber-400 ";
    }
    
    if (overdueReminders.length > 0 && isCurrentMonth) {
      classes += "border-red-300 dark:border-red-600 ";
    } else if (pendingReminders.length > 0 && isCurrentMonth) {
      classes += "border-amber-300 dark:border-amber-600 ";
    }
    
    return classes;
  };

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
    >
      <Card 
        className={getCardClasses()}
        onClick={() => onClick(date, reminders)}
      >
        <div className="flex flex-col h-full">
          {/* Date Number */}
          <div className="flex items-center justify-between mb-2">
            <span className={`text-sm font-medium ${
              isToday 
                ? "text-amber-600 dark:text-amber-400 font-bold" 
                : isCurrentMonth
                ? "text-slate-900 dark:text-white"
                : "text-slate-400 dark:text-slate-500"
            }`}>
              {format(date, 'd')}
            </span>
            
            {/* Today indicator */}
            {isToday && (
              <div className="w-2 h-2 bg-amber-500 rounded-full"></div>
            )}
          </div>

          {/* Reminders */}
          <div className="flex-1 space-y-1">
            {/* Show overdue reminders first */}
            {overdueReminders.slice(0, 2).map((reminder, index) => (
              <div
                key={`overdue-${reminder.id}`}
                className="text-xs p-1 bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 rounded truncate"
                title={reminder.title}
              >
                ⚠️ {reminder.title}
              </div>
            ))}
            
            {/* Show pending reminders */}
            {pendingReminders.filter(r => !isPast(new Date(r.due_date))).slice(0, 2 - overdueReminders.length).map((reminder, index) => (
              <div
                key={`pending-${reminder.id}`}
                className="text-xs p-1 bg-amber-100 dark:bg-amber-900/30 text-amber-800 dark:text-amber-200 rounded truncate"
                title={reminder.title}
              >
                📅 {reminder.title}
              </div>
            ))}
            
            {/* Show completed reminders if space */}
            {completedReminders.slice(0, Math.max(0, 2 - pendingReminders.length)).map((reminder, index) => (
              <div
                key={`completed-${reminder.id}`}
                className="text-xs p-1 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 rounded truncate"
                title={reminder.title}
              >
                ✅ {reminder.title}
              </div>
            ))}
            
            {/* Show count if more reminders */}
            {reminders.length > 2 && (
              <div className="text-xs text-slate-500 dark:text-slate-400 text-center pt-1">
                +{reminders.length - 2} more
              </div>
            )}
          </div>
        </div>
      </Card>
    </motion.div>
  );
}