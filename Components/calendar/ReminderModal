import React from "react";
import { motion } from "framer-motion";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import {
  X,
  Plus,
  Edit,
  CheckCircle2,
  Clock,
  AlertTriangle,
  Calendar,
  MapPin,
  Users
} from "lucide-react";
import { format, isPast } from "date-fns";

const priorityConfig = {
  low: { color: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300", icon: "🔵" },
  medium: { color: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300", icon: "🟡" },
  high: { color: "bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300", icon: "🟠" },
  critical: { color: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300", icon: "🔴" }
};

const categoryConfig = {
  work: { color: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300", icon: "💼" },
  personal: { color: "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300", icon: "👤" },
  health: { color: "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300", icon: "🏥" },
  shopping: { color: "bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300", icon: "🛍️" },
  family: { color: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300", icon: "👨‍👩‍👧‍👦" },
  finance: { color: "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300", icon: "💰" },
  travel: { color: "bg-cyan-100 text-cyan-800 dark:bg-cyan-900/30 dark:text-cyan-300", icon: "✈️" },
  education: { color: "bg-violet-100 text-violet-800 dark:bg-violet-900/30 dark:text-violet-300", icon: "🎓" },
  other: { color: "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300", icon: "📌" }
};

export default function ReminderModal({ date, reminders, onClose, onUpdate, currentUser }) {
  const handleComplete = async (reminderId) => {
    try {
      const { Reminder } = await import("@/entities/Reminder");
      await Reminder.update(reminderId, {
        status: "completed",
        completed_at: new Date().toISOString()
      });
      onUpdate();
    } catch (error) {
      console.error("Error completing reminder:", error);
    }
  };

  const handleSnooze = async (reminderId, minutes = 10) => {
    try {
      const { Reminder } = await import("@/entities/Reminder");
      const newDueDate = new Date();
      newDueDate.setMinutes(newDueDate.getMinutes() + minutes);

      const reminder = reminders.find(r => r.id === reminderId);
      await Reminder.update(reminderId, {
        due_date: newDueDate.toISOString(),
        snooze_count: (reminder.snooze_count || 0) + 1
      });
      onUpdate();
    } catch (error) {
      console.error("Error snoozing reminder:", error);
    }
  };

  const pendingReminders = reminders.filter(r => r.status === "pending");
  const completedReminders = reminders.filter(r => r.status === "completed");

  return (
    <motion.div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm p-4"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        className="w-full max-w-2xl max-h-[90vh] overflow-hidden"
      >
        <Card className="bg-white dark:bg-slate-800 shadow-2xl">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-slate-200 dark:border-slate-700">
            <div>
              <h2 className="text-xl font-bold text-slate-900 dark:text-white">
                {format(date, 'EEEE, MMMM d, yyyy')}
              </h2>
              <p className="text-slate-600 dark:text-slate-300">
                {reminders.length} reminder{reminders.length !== 1 ? 's' : ''}
              </p>
            </div>
            <div className="flex items-center gap-2">
              <Link to={createPageUrl(`Create?due_date=${date.toISOString()}`)}>
                <Button size="sm" className="bg-amber-500 hover:bg-amber-600 text-slate-900">
                  <Plus className="w-4 h-4 mr-2" />
                  Add Reminder
                </Button>
              </Link>
              <Button
                variant="ghost"
                size="icon"
                onClick={onClose}
                className="hover:bg-slate-100 dark:hover:bg-slate-700"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* Content */}
          <div className="p-6 max-h-[60vh] overflow-y-auto">
            {reminders.length === 0 ? (
              <div className="text-center py-8">
                <Calendar className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                <p className="text-slate-500 dark:text-slate-400">No reminders for this day</p>
                <Link to={createPageUrl(`Create?due_date=${date.toISOString()}`)}>
                  <Button className="mt-4 bg-amber-500 hover:bg-amber-600 text-slate-900">
                    <Plus className="w-4 h-4 mr-2" />
                    Create First Reminder
                  </Button>
                </Link>
              </div>
            ) : (
              <div className="space-y-6">
                {/* Pending Reminders */}
                {pendingReminders.length > 0 && (
                  <div>
                    <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4 flex items-center gap-2">
                      <Clock className="w-5 h-5 text-amber-500" />
                      Pending ({pendingReminders.length})
                    </h3>
                    <div className="space-y-3">
                      {pendingReminders.map(reminder => (
                        <Card key={reminder.id} className="p-4 bg-slate-50 dark:bg-slate-700/50">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <h4 className="font-medium text-slate-900 dark:text-white">
                                  {reminder.title}
                                </h4>
                                {isPast(new Date(reminder.due_date)) && (
                                  <Badge className="bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300">
                                    <AlertTriangle className="w-3 h-3 mr-1" />
                                    Overdue
                                  </Badge>
                                )}
                              </div>
                              
                              {reminder.description && (
                                <p className="text-sm text-slate-600 dark:text-slate-300 mb-3">
                                  {reminder.description}
                                </p>
                              )}
                              
                              <div className="flex flex-wrap gap-2 mb-3">
                                <Badge className={priorityConfig[reminder.priority].color}>
                                  <span className="mr-1">{priorityConfig[reminder.priority].icon}</span>
                                  {reminder.priority}
                                </Badge>
                                
                                <Badge className={categoryConfig[reminder.category].color}>
                                  <span className="mr-1">{categoryConfig[reminder.category].icon}</span>
                                  {reminder.category}
                                </Badge>
                                
                                {reminder.delegated_to_email && currentUser && (
                                  <Badge variant="outline">
                                    <Users className="w-3 h-3 mr-1" />
                                    {reminder.created_by === currentUser.email 
                                      ? `Delegated to ${reminder.delegated_to_email.split('@')[0]}`
                                      : `From ${reminder.created_by.split('@')[0]}`
                                    }
                                  </Badge>
                                )}
                                
                                {reminder.location && (
                                  <Badge variant="outline">
                                    <MapPin className="w-3 h-3 mr-1" />
                                    {reminder.location.split('|')[0]}
                                  </Badge>
                                )}
                              </div>
                              
                              <p className="text-sm text-slate-500 dark:text-slate-400">
                                Due: {format(new Date(reminder.due_date), 'h:mm a')}
                              </p>
                            </div>
                            
                            <div className="flex items-center gap-2 ml-4">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleComplete(reminder.id)}
                                className="text-green-600 border-green-600 hover:bg-green-50 dark:hover:bg-green-900/20"
                              >
                                <CheckCircle2 className="w-4 h-4 mr-1" />
                                Complete
                              </Button>
                              
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleSnooze(reminder.id, 60)}
                                className="text-amber-600 border-amber-600 hover:bg-amber-50 dark:hover:bg-amber-900/20"
                              >
                                <Clock className="w-4 h-4 mr-1" />
                                Snooze 1h
                              </Button>
                              
                              <Link to={createPageUrl(`Create?id=${reminder.id}`)}>
                                <Button size="sm" variant="ghost">
                                  <Edit className="w-4 h-4" />
                                </Button>
                              </Link>
                            </div>
                          </div>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* Completed Reminders */}
                {completedReminders.length > 0 && (
                  <div>
                    <h3 className="text-lg font-semibold text-slate-900 dark:text-white mb-4 flex items-center gap-2">
                      <CheckCircle2 className="w-5 h-5 text-green-500" />
                      Completed ({completedReminders.length})
                    </h3>
                    <div className="space-y-2">
                      {completedReminders.map(reminder => (
                        <Card key={reminder.id} className="p-3 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-700">
                          <div className="flex items-center justify-between">
                            <div>
                              <h4 className="font-medium text-green-900 dark:text-green-100 line-through">
                                {reminder.title}
                              </h4>
                              <p className="text-sm text-green-700 dark:text-green-300">
                                Completed at {format(new Date(reminder.completed_at || reminder.updated_date), 'h:mm a')}
                              </p>
                            </div>
                            <CheckCircle2 className="w-5 h-5 text-green-600 dark:text-green-400" />
                          </div>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </Card>
      </motion.div>
    </motion.div>
  );
}