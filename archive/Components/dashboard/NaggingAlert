
import React, { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { 
  X, 
  CheckCircle2, 
  Clock, 
  AlertTriangle,
  Volume2,
  VolumeX
} from "lucide-react";
import { format } from "date-fns";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

const ALERT_SOUND_URL = "https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg";

export default function NaggingAlert({ reminder, onComplete, onSnooze, onDismiss }) {
  // Initialize from localStorage instead of always starting muted
  const [isMuted, setIsMuted] = useState(() => {
    // Read the user's sound preference from localStorage.
    // If 'nagme-alert-sound-enabled' is 'true', sound is enabled (not muted), so isMuted should be false.
    // Otherwise, sound is disabled or not set, so isMuted should be true.
    const saved = localStorage.getItem('nagme-alert-sound-enabled');
    return saved === 'true' ? false : true; 
  });
  const [audioReady, setAudioReady] = useState(false);
  const audioRef = useRef(null);

  useEffect(() => {
    // Initialize audio element
    audioRef.current = new Audio(ALERT_SOUND_URL);
    audioRef.current.loop = true;
    // Initially, keep the audio element muted to comply with browser autoplay policies.
    // Its actual state will be set after 'canplaythrough' and based on user preference.
    audioRef.current.muted = true; 

    const handleCanPlayThrough = async () => {
      setAudioReady(true);
      const soundEnabledInStorage = localStorage.getItem('nagme-alert-sound-enabled') === 'true';

      if (soundEnabledInStorage) {
        audioRef.current.muted = false; // Attempt to unmute the audio element
        try {
          await audioRef.current.play();
          setIsMuted(false); // Successfully unmuted, update UI state
        } catch (error) {
          // Autoplay was blocked by the browser or another error occurred.
          console.warn("Could not auto-play audio (browser blocked or other issue):", error);
          audioRef.current.muted = true; // Ensure the audio element is muted
          setIsMuted(true); // Reflect the muted state in the UI
          // Update localStorage to 'false' because autoplay failed. 
          // This prevents repeated autoplay attempts on subsequent loads until the user manually enables it.
          localStorage.setItem('nagme-alert-sound-enabled', 'false');
        }
      } else {
        audioRef.current.muted = true; // Audio element remains muted as per user preference
        setIsMuted(true); // Reflect the muted state in the UI
      }
    };

    audioRef.current.addEventListener('canplaythrough', handleCanPlayThrough);
    
    // Cleanup on unmount
    return () => {
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.removeEventListener('canplaythrough', handleCanPlayThrough);
        audioRef.current = null;
      }
    };
  }, []); // Empty dependency array means this effect runs once on mount

  const toggleSound = () => {
    if (!audioRef.current || !audioReady) return;
    
    const newMutedState = !isMuted;
    setIsMuted(newMutedState); // Optimistic UI update
    
    // Save preference to localStorage.
    // If newMutedState is true (it's now muted), then sound is 'false' (not enabled).
    // If newMutedState is false (it's now unmuted), then sound is 'true' (enabled).
    localStorage.setItem('nagme-alert-sound-enabled', newMutedState ? 'false' : 'true');
    
    if (newMutedState) {
      // Muting - pause the audio
      audioRef.current.pause();
      audioRef.current.muted = true;
    } else {
      // Unmuting - play the audio
      audioRef.current.muted = false;
      audioRef.current.play().catch(error => {
        console.warn("Could not play audio after user interaction:", error);
        // If play fails, revert UI state and localStorage to muted
        setIsMuted(true); 
        localStorage.setItem('nagme-alert-sound-enabled', 'false');
      });
    }
  };

  const handleComplete = () => {
    if (audioRef.current) {
      audioRef.current.pause();
    }
    onComplete();
  };

  const handleSnooze = (minutes) => {
    if (audioRef.current) {
      audioRef.current.pause();
    }
    onSnooze(minutes);
  };

  const handleCustomSnooze = () => {
    const minutes = window.prompt("Snooze for how many minutes?", "15");
    if (minutes !== null) {
      const parsedMinutes = parseInt(minutes, 10);
      if (!isNaN(parsedMinutes) && parsedMinutes > 0) {
        handleSnooze(parsedMinutes);
      } else if (minutes.trim() !== "") {
        alert("Please enter a valid positive number of minutes.");
      }
    }
  };

  const handleDismiss = () => {
    if (audioRef.current) {
      audioRef.current.pause();
    }
    onDismiss();
  };

  const backdropVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1 },
    exit: { opacity: 0 },
  };

  const modalVariants = {
    hidden: { scale: 0.7, opacity: 0 },
    visible: { 
      scale: 1, 
      opacity: 1, 
      transition: { type: "spring", stiffness: 300, damping: 25 } 
    },
    exit: { scale: 0.7, opacity: 0 }
  };

  return (
    <motion.div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm"
      variants={backdropVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      <motion.div
        variants={modalVariants}
      >
        <Card className="p-6 bg-red-50 dark:bg-slate-900 border-2 border-red-500 shadow-2xl w-full max-w-md mx-4 aggressive-flash">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
              <div>
                <h3 className="font-bold text-red-900 dark:text-red-100 text-lg">
                  ‚ö†Ô∏è Reminder Overdue!
                </h3>
                <p className="text-red-700 dark:text-red-200 text-sm">
                  Due {format(new Date(reminder.due_date), "MMM d 'at' h:mm a")}
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              <Button
                size="icon"
                variant="ghost"
                onClick={toggleSound}
                disabled={!audioReady}
                className={`text-red-700 hover:text-red-900 dark:text-red-200 dark:hover:bg-red-800/20 ${isMuted ? 'animate-pulse' : ''}`}
                title={isMuted ? "Enable sound alert" : "Disable sound alert"}
              >
                {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
              </Button>
              <Button
                size="icon"
                variant="ghost"
                onClick={handleDismiss}
                className="text-red-700 hover:text-red-900 dark:text-red-200 dark:hover:bg-red-800/20"
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </div>
          
          <div className="mb-4">
            <h4 className="font-semibold text-red-900 dark:text-red-100 mb-2">
              {reminder.title}
            </h4>
            {reminder.description && (
              <p className="text-red-800 dark:text-red-200 text-sm">
                {reminder.description}
              </p>
            )}
          </div>
          
          <div className="flex gap-3">
            <Button
              onClick={handleComplete}
              className="bg-green-600 hover:bg-green-700 text-white flex-1"
            >
              <CheckCircle2 className="w-4 h-4 mr-2" />
              Mark Complete
            </Button>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="border-red-300 dark:border-red-700 text-red-700 dark:text-red-200 hover:bg-red-100 dark:hover:bg-red-800/20">
                  <Clock className="w-4 h-4 mr-2" />
                  Snooze
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuItem onClick={() => handleSnooze(5)}>
                  5 minutes
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleSnooze(15)}>
                  15 minutes
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleSnooze(60)}>
                  1 hour
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleSnooze(24 * 60)}>
                  1 day
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={handleCustomSnooze}>
                  Custom...
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          
          <div className="mt-3 text-center">
            <p className="text-xs text-red-600 dark:text-red-300">
              This reminder will keep appearing until completed
              {isMuted && ( // Only show this message if currently muted
                <span className="block mt-1 font-medium">
                  üîä Click the sound icon to enable audio alerts
                </span>
              )}
            </p>
          </div>
        </Card>
      </motion.div>
    </motion.div>
  );
}
