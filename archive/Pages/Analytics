
import React, { useState, useEffect } from "react";
import { Reminder } from "@/entities/Reminder";
import { Card } from "@/components/ui/card";
import {
  BarChart3,
  TrendingUp,
  Clock,
  CheckCircle2,
  Target,
  Calendar,
  Zap
} from "lucide-react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line
} from "recharts";
import { format, startOfWeek, endOfWeek, eachDayOfInterval, subDays } from "date-fns";

export default function Analytics() {
  const [reminders, setReminders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadReminders();
  }, []);

  const loadReminders = async () => {
    try {
      const data = await Reminder.list();
      setReminders(data);
    } catch (error) {
      console.error("Error loading reminders:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Analytics calculations
  const totalReminders = reminders.length;
  const completedReminders = reminders.filter(r => r.status === "completed").length;
  const completionRate = totalReminders > 0 ? Math.round((completedReminders / totalReminders) * 100) : 0;
  const overdueReminders = reminders.filter(r =>
    r.status === "pending" && new Date(r.due_date) < new Date()
  ).length;

  // Category breakdown
  const categoryData = Object.entries(
    reminders.reduce((acc, reminder) => {
      acc[reminder.category] = (acc[reminder.category] || 0) + 1;
      return acc;
    }, {})
  ).map(([name, value]) => ({ name, value }));

  // Priority breakdown
  const priorityData = Object.entries(
    reminders.reduce((acc, reminder) => {
      acc[reminder.priority] = (acc[reminder.priority] || 0) + 1;
      return acc;
    }, {})
  ).map(([name, value]) => ({ name, value }));

  // Weekly completion trend
  const weeklyData = eachDayOfInterval({
    start: subDays(new Date(), 6),
    end: new Date()
  }).map(date => {
    const dayReminders = reminders.filter(r => {
      const reminderDate = new Date(r.completed_at || r.created_date);
      return format(reminderDate, 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd');
    });

    return {
      date: format(date, 'MMM d'),
      completed: dayReminders.filter(r => r.status === "completed").length,
      created: dayReminders.length
    };
  });

  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899'];

  if (isLoading) {
    return (
      <div className="p-6 lg:p-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {Array(4).fill(0).map((_, i) => (
              <Card key={i} className="p-6 animate-pulse bg-white dark:bg-slate-800">
                <div className="h-8 bg-slate-200 dark:bg-slate-600 rounded mb-4"></div>
                <div className="h-12 bg-slate-200 dark:bg-slate-600 rounded"></div>
              </Card>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900 dark:text-white mb-2">
            Productivity Analytics
          </h1>
          <p className="text-slate-600 dark:text-slate-300">
            Track your reminder completion patterns and productivity insights
          </p>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="p-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100 text-sm font-medium">Total Reminders</p>
                <p className="text-3xl font-bold">{totalReminders}</p>
              </div>
              <BarChart3 className="w-8 h-8 text-blue-200" />
            </div>
          </Card>

          <Card className="p-6 bg-gradient-to-r from-green-500 to-green-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100 text-sm font-medium">Completed</p>
                <p className="text-3xl font-bold">{completedReminders}</p>
              </div>
              <CheckCircle2 className="w-8 h-8 text-green-200" />
            </div>
          </Card>

          <Card className="p-6 bg-gradient-to-r from-amber-500 to-amber-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-amber-100 text-sm font-medium">Completion Rate</p>
                <p className="text-3xl font-bold">{completionRate}%</p>
              </div>
              <Target className="w-8 h-8 text-amber-200" />
            </div>
          </Card>

          <Card className="p-6 bg-gradient-to-r from-red-500 to-red-600 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-red-100 text-sm font-medium">Overdue</p>
                <p className="text-3xl font-bold">{overdueReminders}</p>
              </div>
              <Clock className="w-8 h-8 text-red-200" />
            </div>
          </Card>
        </div>

        {/* Charts */}
        <div className="grid lg:grid-cols-2 gap-6 mb-8">
          {/* Category Breakdown */}
          <Card className="p-6">
            <h3 className="text-xl font-semibold text-slate-900 dark:text-white mb-6">
              Reminders by Category
            </h3>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={categoryData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {categoryData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </Card>

          {/* Priority Distribution */}
          <Card className="p-6">
            <h3 className="text-xl font-semibold text-slate-900 dark:text-white mb-6">
              Priority Distribution
            </h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={priorityData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="value" fill="#3B82F6" />
              </BarChart>
            </ResponsiveContainer>
          </Card>
        </div>

        {/* Weekly Trend */}
        <Card className="p-6">
          <h3 className="text-xl font-semibold text-slate-900 dark:text-white mb-6">
            Weekly Activity Trend
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={weeklyData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Line
                type="monotone"
                dataKey="completed"
                stroke="#10B981"
                strokeWidth={2}
                name="Completed"
              />
              <Line
                type="monotone"
                dataKey="created"
                stroke="#3B82F6"
                strokeWidth={2}
                name="Created"
              />
            </LineChart>
          </ResponsiveContainer>
        </Card>
      </div>
    </div>
  );
}
