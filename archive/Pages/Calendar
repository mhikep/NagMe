import React, { useState, useEffect } from "react";
import { Reminder } from "@/entities/Reminder";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import {
  ChevronLeft,
  ChevronRight,
  Plus,
  Calendar as CalendarIcon,
  Clock,
  AlertTriangle,
  CheckCircle2
} from "lucide-react";
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, isToday, isPast, addMonths, subMonths } from "date-fns";
import { motion, AnimatePresence } from "framer-motion";

import CalendarDay from "../components/calendar/CalendarDay";
import ReminderModal from "../components/calendar/ReminderModal";

const WEEKDAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

export default function Calendar() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [reminders, setReminders] = useState([]);
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedReminders, setSelectedReminders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setIsLoading(true);
      const [reminderData, userData] = await Promise.all([
        Reminder.list("-created_date"),
        User.me()
      ]);
      
      // Show reminders that user created OR that are delegated to user
      const visibleReminders = reminderData.filter(r => 
        r.created_by === userData.email || 
        r.delegated_to_email === userData.email
      );
      
      setReminders(visibleReminders);
      setCurrentUser(userData);
    } catch (error) {
      console.error("Error loading calendar data:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const monthStart = startOfMonth(currentDate);
  const monthEnd = endOfMonth(currentDate);
  const calendarDays = eachDayOfInterval({ start: monthStart, end: monthEnd });

  // Add days from previous month to fill the first week
  const firstDayOfWeek = monthStart.getDay();
  const previousMonthDays = [];
  for (let i = firstDayOfWeek - 1; i >= 0; i--) {
    const day = new Date(monthStart);
    day.setDate(day.getDate() - (i + 1));
    previousMonthDays.push(day);
  }

  // Add days from next month to fill the last week
  const lastDayOfWeek = monthEnd.getDay();
  const nextMonthDays = [];
  for (let i = 1; i <= (6 - lastDayOfWeek); i++) {
    const day = new Date(monthEnd);
    day.setDate(day.getDate() + i);
    nextMonthDays.push(day);
  }

  const allCalendarDays = [...previousMonthDays, ...calendarDays, ...nextMonthDays];

  const getRemindersForDate = (date) => {
    return reminders.filter(reminder => {
      const reminderDate = new Date(reminder.due_date);
      return isSameDay(reminderDate, date);
    });
  };

  const handleDateClick = (date, dayReminders) => {
    setSelectedDate(date);
    setSelectedReminders(dayReminders);
  };

  const handlePreviousMonth = () => {
    setCurrentDate(prev => subMonths(prev, 1));
  };

  const handleNextMonth = () => {
    setCurrentDate(prev => addMonths(prev, 1));
  };

  const handleReminderUpdate = async () => {
    await loadData();
    setSelectedReminders(getRemindersForDate(selectedDate));
  };

  const stats = {
    total: reminders.length,
    pending: reminders.filter(r => r.status === "pending").length,
    completed: reminders.filter(r => r.status === "completed").length,
    overdue: reminders.filter(r => r.status === "pending" && isPast(new Date(r.due_date))).length
  };

  if (isLoading) {
    return (
      <div className="p-6 lg:p-8">
        <div className="max-w-7xl mx-auto">
          <div className="animate-pulse">
            <div className="h-8 bg-slate-200 dark:bg-slate-600 rounded w-1/4 mb-4"></div>
            <div className="grid grid-cols-7 gap-4 mb-4">
              {Array(7).fill(0).map((_, i) => (
                <div key={i} className="h-6 bg-slate-200 dark:bg-slate-600 rounded"></div>
              ))}
            </div>
            <div className="grid grid-cols-7 gap-4">
              {Array(35).fill(0).map((_, i) => (
                <div key={i} className="h-24 bg-slate-200 dark:bg-slate-600 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 lg:p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6 mb-8">
          <div>
            <h1 className="text-3xl lg:text-4xl font-bold text-slate-900 dark:text-white mb-2">
              Calendar View
            </h1>
            <p className="text-lg text-slate-600 dark:text-slate-300">
              Visualize your reminders across the month
            </p>
          </div>
          <div className="flex gap-3 w-full lg:w-auto">
            <Link to={createPageUrl("Create")} className="flex-1 lg:flex-none">
              <Button className="w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-slate-900 font-semibold">
                <Plus className="w-5 h-5 mr-2" />
                New Reminder
              </Button>
            </Link>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          <Card className="p-4 bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-700">
            <div className="flex items-center gap-3">
              <CalendarIcon className="w-5 h-5 text-blue-600 dark:text-blue-400" />
              <div>
                <p className="text-sm font-medium text-blue-900 dark:text-blue-100">Total</p>
                <p className="text-xl font-bold text-blue-900 dark:text-blue-100">{stats.total}</p>
              </div>
            </div>
          </Card>
          <Card className="p-4 bg-amber-50 dark:bg-amber-900/20 border-amber-200 dark:border-amber-700">
            <div className="flex items-center gap-3">
              <Clock className="w-5 h-5 text-amber-600 dark:text-amber-400" />
              <div>
                <p className="text-sm font-medium text-amber-900 dark:text-amber-100">Pending</p>
                <p className="text-xl font-bold text-amber-900 dark:text-amber-100">{stats.pending}</p>
              </div>
            </div>
          </Card>
          <Card className="p-4 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-700">
            <div className="flex items-center gap-3">
              <CheckCircle2 className="w-5 h-5 text-green-600 dark:text-green-400" />
              <div>
                <p className="text-sm font-medium text-green-900 dark:text-green-100">Completed</p>
                <p className="text-xl font-bold text-green-900 dark:text-green-100">{stats.completed}</p>
              </div>
            </div>
          </Card>
          <Card className="p-4 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-700">
            <div className="flex items-center gap-3">
              <AlertTriangle className="w-5 h-5 text-red-600 dark:text-red-400" />
              <div>
                <p className="text-sm font-medium text-red-900 dark:text-red-100">Overdue</p>
                <p className="text-xl font-bold text-red-900 dark:text-red-100">{stats.overdue}</p>
              </div>
            </div>
          </Card>
        </div>

        {/* Calendar Navigation */}
        <Card className="p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <Button
              variant="outline"
              onClick={handlePreviousMonth}
              className="hover:bg-slate-100 dark:hover:bg-slate-700"
            >
              <ChevronLeft className="w-4 h-4 mr-2" />
              Previous
            </Button>
            
            <h2 className="text-2xl font-bold text-slate-900 dark:text-white">
              {format(currentDate, 'MMMM yyyy')}
            </h2>
            
            <Button
              variant="outline"
              onClick={handleNextMonth}
              className="hover:bg-slate-100 dark:hover:bg-slate-700"
            >
              Next
              <ChevronRight className="w-4 h-4 ml-2" />
            </Button>
          </div>

          {/* Calendar Grid */}
          <div className="grid grid-cols-7 gap-1 mb-4">
            {WEEKDAYS.map(day => (
              <div key={day} className="p-3 text-center">
                <span className="text-sm font-medium text-slate-600 dark:text-slate-400">
                  {day}
                </span>
              </div>
            ))}
          </div>

          <div className="grid grid-cols-7 gap-1">
            {allCalendarDays.map((date, index) => {
              const dayReminders = getRemindersForDate(date);
              const isCurrentMonth = date.getMonth() === currentDate.getMonth();
              
              return (
                <CalendarDay
                  key={index}
                  date={date}
                  reminders={dayReminders}
                  isCurrentMonth={isCurrentMonth}
                  isToday={isToday(date)}
                  onClick={() => handleDateClick(date, dayReminders)}
                />
              );
            })}
          </div>
        </Card>

        {/* Reminder Modal */}
        <AnimatePresence>
          {selectedDate && (
            <ReminderModal
              date={selectedDate}
              reminders={selectedReminders}
              onClose={() => setSelectedDate(null)}
              onUpdate={handleReminderUpdate}
              currentUser={currentUser}
            />
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}